import pandas as pd
import numpy as np

# 데이터 로딩 (경로 및 파일명, 시트명은 실제 환경에 맞게 수정)
excel_file_path = "klips26p.xlsx" # 또는 .xls

try:
    df = pd.read_excel(excel_file_path)
except FileNotFoundError:
    print(f"오류: 엑셀 파일을 찾을 수 없습니다. 경로를 확인하세요: {excel_file_path}")

# 0. 분석 대상 선정: 임금근로자
# p260314: 주된 일자리 종사상 지위 (1:상용직, 2:임시직, 3:일용직) [cite: 494]
df = df[df['p260314'].isin([1, 2, 3])].copy()

# 결측치 처리 함수 (KLIPS 일반 결측 코드: -1, -2 등)
def convert_klips_missing(value):
    if pd.isna(value) or value in [-1, -2, -9]: # 일반적인 KLIPS 결측값 코드
        return np.nan
    return value

# 처리할 변수 목록 (문서 기반)
# (문서에서 '최종적으로 쓸 변수들.docx' 파일 내용 참고하여 목록 구성)
vars_to_process = [
    'p260501', 'p260601', 'p260602', 'p260605', 'p260315', 'p260611', 'p260612', 'p260314', # 비정규직 정의용
    'p260101', 'p260107', 'p265501', 'p260102', # 집단특성: 인구학 
    'p260110', 'p260111', # 집단특성: 교육
    'p266101', 'p266109', # 집단특성: 건강
    'p261642', # 성과: 임금
    'p261006', 'p261012', 'p261003', 'p261004','p261011','p261019', # 성과: 근로시간
    'p264312', # 성과: 고용안정성 인식
    'p262101', 'p262102', 'p262103', 'p262104', 'p262105', # 성과: 사회보험
    # 복리후생 (문서에 명시된 7개 항목의 원천 변수명)
    'p264101', 'p264104', 'p264105', 'p264106', 'p264110', 'p264113', 'p264123',
    'p264321', # 성과: 직무만족도
    'p264501'  # 성과: 교육훈련
]


for var in vars_to_process:
    if var in df.columns: # 데이터프레임에 해당 컬럼이 있을 경우에만 처리
        df[var] = df[var].apply(convert_klips_missing)
    # else:
    #     print(f"주의: 변수 '{var}'가 데이터프레임에 존재하지 않습니다. 확인이 필요합니다.")


# 1. 비정규직 정의 변수 생성

# 1-1. 기간제 근로자 [cite: 1]
df['기간제'] = np.where(df['p260501'] == 1, 1, 0)

# 1-2. 비기간제 근로자 [cite: 1]
# nonfixed_a: 계약기간은 없지만 일할 수 있는 이유가 계약이 갱신되어 고용이 지속 -> 비기간제 한시적 근로자
df['비기간제_갱신'] = np.where(
    (df['p260501'] == 2) & (df['p260601'] == 1) & (df['p260602'] == 2), 1, 0
)
# nonfixed_b: 계약기간이 없어서 일할 수 없는 이유가 일자리 자체의 한시적 특성이나 사업장 사정 -> 불안정한 비정규직
df['비기간제_불안정'] = np.where(
    (df['p260501'] == 2) & (df['p260601'] == 2) & (df['p260605'].isin([1,2,3,4,5,6])), 1, 0
)

# 1-3. 시간제 근로자 [cite: 2]
df['시간제'] = np.where(df['p260315'] == 1, 1, 0)

# 1-4. 파견 근로자 [cite: 2]
df['파견'] = np.where(df['p260611'] == 2, 1, 0)

# 1-5. 용역 노동자 [cite: 2]
df['용역'] = np.where(df['p260611'] == 3, 1, 0)

# 1-6. 도급 노동자 [cite: 2]
df['도급'] = np.where(df['p260612'] == 1, 1, 0)

# 1-7. 임시직 근로자 (종사상 지위 기준) [cite: 2]
df['임시직'] = np.where(df['p260314'] == 2, 1, 0)

# 1-8. 일용직 근로자 (종사상 지위 기준) [cite: 2]
df['일용직'] = np.where(df['p260314'] == 3, 1, 0)


# 2. 집단 특성 변수 생성

# 2-1. 인구학적 특성
# 성별 [cite: 2]
df['여자'] = np.where(df['p260101'] == 1, 1, 0) # 1:여자, 0:남자

# 연령 [cite: 2] --------------------> 연속형형
df['연령'] = df['p260107']

# 혼인상태 [cite: 3]
df['혼인상태'] = np.nan # 비워야 채울 수 있다. 
df.loc[df['p265501'] == 1, '혼인상태'] = 1 #'미혼'
df.loc[df['p265501'] == 2, '혼인상태'] = 2 #'기혼유배우'
df.loc[df['p265501'].isin([3,4,5]), '혼인상태'] = 3 #'별거/이혼/사별'

# 가구주 여부 및 가구 내 역할 [cite: 3]
df['가구주'] = np.where(df['p260102'] == 10, 1, 0) # 10: 가구주

# 2-2. 교육 수준 (p260110: 학교, p260111: 이수여부 (1:졸업)) [cite: 3, 4, 5, 6, 7, 8]
df['학력'] = np.nan
# 중졸 이하 (1)
df.loc[df['p260110'].isin([1,2,3,4]), '학력'] = 1
df.loc[(df['p260110'] == 5) & (df['p260111'] != 1), '학력'] = 1 # 고등학교 미졸업

# 고졸 (2)
df.loc[(df['p260110'] == 5) & (df['p260111'] == 1), '학력'] = 2 
df.loc[(df['p260110'] == 6) & (df['p260111'] != 1), '학력'] = 2 # 전문대 미졸업
df.loc[(df['p260110'] == 7) & (df['p260111'] != 1), '학력'] = 2 # 대학교 미졸업

# 전문대졸 (3)
df.loc[(df['p260110'] == 6) & (df['p260111'] == 1), '학력'] = 3 

# 대졸 (4)
df.loc[(df['p260110'] == 7) & (df['p260111'] == 1), '학력'] = 4 
df.loc[(df['p260110'].isin([8,9])) & (df['p260111'] != 1), '학력'] = 4 # 대학원 미졸업

# 대학원졸 이상 (5)
df.loc[(df['p260110'].isin([8,9])) & (df['p260111'] == 1), '학력'] = 5

# 2-3. 건강상태 [cite: 9]
df['주관적건강'] = df['p266101'] # 1매우좋음 ~ 5매우나쁨
df['건강제한'] = np.where(df['p266109'] == 1, 1, 0) # 1: 어려움 있음, 0: 없음

# 3. 노동시장 성과 변수 생성

# 3-1. 소득 및 임금 -------------> 연속형
# 월평균임금 (세후, p261642) -> 로그 변환 [cite: 9]
df['월평균임금(로그)'] = np.log(df['p261642'].replace(0, np.nan).astype(float)) # 0인 경우 NA 처리 후 float으로 변환하여 로그

# 3-2. 근로시간 -------------> 연속형
# total_work_hours (파생변수): p261006(주당정규근로시간) + p261012(주당초과근로시간) 등을 조합 [cite: 10]
df['주당근로시간'] = np.nan
# 조건1: 정규근로시간 있고(p261003=1), 초과근로 없는 경우(p261011=1) -> 주당 정규근로시간
df.loc[(df['p261003'] == 1) & (df['p261011'] == 1) & pd.notna(df['p261006']), '주당근로시간'] = df['p261006']
# 조건2: 정규근로시간 있고(p261003=1), 초과근로 있고(p261011=2), 초과근로가 주 단위(p261019=1) -> 주당 정규 + 주당 초과
df.loc[(df['p261003'] == 1) & (df['p261011'] == 2) & (df['p261019'] == 1) & pd.notna(df['p261006']) & pd.notna(df['p261012']), '주당근로시간'] = df['p261006'] + df['p261012']
# 조건3: 정규근로시간 있고(p261003=1), 초과근로 있고(p261011=2), 초과근로가 월 단위(p261019=2) -> 주당 정규 + (월평균 초과 / 4.3)
df.loc[(df['p261003'] == 1) & (df['p261011'] == 2) & (df['p261019'] == 2) & pd.notna(df['p261006']) & pd.notna(df['p261012']), '주당근로시간'] = df['p261006'] + (df['p261012'] / 4.3)
# 조건4: 정규근로시간 없는 경우(p261003=2) -> 주당 평균 근무시간(p261004) 사용
df.loc[(df['p261003'] == 2) & pd.notna(df['p261004']), '주당근로시간'] = df['p261004']

# 3-3. 고용안정성 및 인식
# p264312: 취업의 안정성 만족도 (1매우만족 ~ 5매우불만족) [cite: 10]
df['취업안정성만족도'] = df['p264312']

# 3-4. 사회보험 (개별 더미 변수)
# 분석 대상을 p262102 != 1 (특수직역연금 미가입자)로 한정하고 p262101 분석 [cite: 10]
df_temp_social_insurance = df[df['p262102'] != 1].copy()
df['국민연금'] = np.nan # 초기화
df.loc[df_temp_social_insurance.index, '국민연금'] = np.where(df_temp_social_insurance['p262101'] == 1, 1, 0)
del df_temp_social_insurance

df['건강보험'] = np.where(df['p262103'] == 1, 1, 0)
df['고용보험'] = np.where(df['p262104'] == 1, 1, 0)
df['산재보험'] = np.where(df['p262105'] == 1, 1, 0)

# 네 가지 보험 가입 여부(1/0/np.nan) 합계 → 가입 개수
df['사회보험가입개수'] = df[['국민연금', '건강보험', '고용보험', '산재보험']].sum(axis=1, skipna=False)

# 3-6. 직무만족도
df['직무만족도'] = df['p264321'] # [cite: 11]

# 3-7. 교육훈련 기회
df['교육훈련기회'] = np.where(df['p264501'] == 1, 1, 0) # [cite: 11]

# 주요 변수들의 결측치 개수 확인
print("\n--- 주요 변수별 결측치 개수 ---")
print(df[['기간제', '비기간제_갱신', '비기간제_불안정', '시간제', '파견', '용역', '도급', '임시직', '일용직', '여자', '연령', '혼인상태', '가구주', '학력', '주관적건강', '건강제한', '취업안정성만족도', '국민연금', '건강보험', '고용보험', '산재보험', '사회보험가입개수', '직무만족도', '교육훈련기회']].isna().sum())

# 작업 완료 후 데이터 저장
df.to_excel("klips26p_processed.xlsx", index=False, engine='openpyxl')

print("\n----- Python 코드 실행 완료 (엑셀 파일 가정) -----")
print("생성된 변수 및 전처리된 df의 일부:")
print(df[['기간제', '비기간제_갱신', '비기간제_불안정', '시간제', '파견', '용역', '도급', '임시직', '일용직', '여자', '연령', '혼인상태', '가구주', '학력', '주관적건강', '건강제한', '취업안정성만족도', '국민연금', '건강보험', '고용보험', '산재보험', '사회보험가입개수', '직무만족도', '교육훈련기회']].head())
